targets = [
    { triple = "wasm32-unknown-unknown" }
]

[workspace]
members = ["crates/*"]
resolver="2"
exclude = ["crates/gui/exports_macro"]

# [patch.crates-io]
[patch.crates-io]
probabilistic-collections = { git = "https://github.com/GaiaWorld/pi_probabilistic_collections.git" }
# pi_time = { path = "../pi_time" }
# pi_path_finding = { path = "../pi_path_finding" }
# pi_flex_layout = { path = "../pi_flex_layout" }
# bevy = { path = "../bevy" }
# pi_slotmap = { path = "../pi_slotmap" }
# pi_map = { path = "../pi_map" }
# wgpu = {path = "../wgpu/wgpu"}
# smallvec = {path = "../smallvec"}
# pi_cache = {path = "../pi_cache"}
# pi_assets = {path = "../pi_assets"}
# pi_graph = { path = "../pi_graph" }
# pi_async_graph = { path = "../pi_async_graph" }
# pi_spatial ={path="../pi_spatial"}
# wasm-bindgen = { path = "../wasm-bindgen" }

[patch.yn]
# winit = { path = "../winit" }
# pi_hal = { path = "../pi_hal" }

# pi_render
# pi_render = { path = "../pi_render" }
# render_utils = { path = "../pi_render/crates/render_utils" }
# render_derive = { path = "../pi_render/crates/render_derive" }
# render_compile = { path = "../pi_render/crates/render_compile" }

# pi_bevy
# pi_bevy_render_plugin = { path="../pi_bevy/crates/render" }
# pi_bevy_winit_window = { path="../pi_bevy/crates/winit_window" }
# pi_bevy_ecs_extend = { path="../pi_bevy/crates/ecs_extend" }
# pi_bevy_ecs_macro = { path="../pi_bevy/crates/ecs_extend/macro" }
# pi_bevy_asset = { path="../pi_bevy/crates/asset" }
# pi_window_renderer = { path="../pi_bevy/crates/window_renderer" }
# pi_bevy_post_process= { path = "../pi_bevy/crates/post_process" }
# pi_bevy_window= { path = "../pi_bevy/crates/window" }

# pi_ui_render = { path = "../pi_ui_render_new" }
# pi_style = { path = "../pi_style" }
# pi_postprocess ={path="../pi_post_process"}
# pi_animation ={path="../pi_animation"}

# [package.metadata.wasm-pack.profile.profiling]
# wasm-opt = ['-O']

# # `wasm-opt` is on by default in for the release profile, but it can be
# # disabled by setting it to `false`
# [package.metadata.wasm-pack.profile.release]
# wasm-opt = ['-Os']
# lto = true #这为LLVM提供了更多内联和修剪功能的机会。它不仅使.wasm尺寸更小，而且在运行时也更快！缺点是编译将花费更长的时间
# opt-level = 's'  # 默认情况下，对LLVM的优化通道进行了调整，以提高速度，而不是大小。我们可以通过修改以下
# # opt-level = "z" # 了更积极地优化尺寸，以进一步的潜在速度成本
# # 请注意，令人惊讶的是，opt-level = "s"有时二进制文件的大小可能小于opt-level = "z"。总是测量！
# panic = 'abort'
# codegen-units = 1


[profile.release]
# debug= true
# strip = true
lto = true #这为LLVM提供了更多内联和修剪功能的机会。它不仅使.wasm尺寸更小，而且在运行时也更快！缺点是编译将花费更长的时间
opt-level = 's'  # 默认情况下，对LLVM的优化通道进行了调整，以提高速度，而不是大小。我们可以通过修改以下
# opt-level = "z" # 了更积极地优化尺寸，以进一步的潜在速度成本
# 请注意，令人惊讶的是，opt-level = "s"有时二进制文件的大小可能小于opt-level = "z"。总是测量！
panic = 'abort'
codegen-units = 1
# dwarf-debug-info = true

# # wasm-pack编译是，无法自主选择profile，这里不起作用，应该拷贝到profile.release
# [profile.profiling]
# inherits = "release"
# lto = false


[profile.dev]
opt-level = 3
debug = false
# split-debuginfo = '...'  # Platform-specific.
# debug-assertions = false
# overflow-checks = false
# lto = false
# panic = 'unwind'
# incremental = false
# codegen-units = 16
# rpath = false

# [patch."https://github.com/GaiaWorld/pi_path_finding"]
# pi_path_finding = { path = "../pi_path_finding" }

# [patch."https://github.com/GaiaWorld/pi_spine_rs"]
# pi_spine_rs = { path = "../pi_spine_rs" }


# [patch."https://github.com/GaiaWorld/pi_scene"]
# pi_scene_math = { path = "../pi_scene/crates/pi_scene_math" }
# pi_scene_math = { path = "../pi_scene/crates/pi_scene_math" }

# [patch."https://github.com/GaiaWorld/pi_3d"]
# pi_3d               = { path = "../pi_3d" }
# pi_engine_shell     = { path = "../pi_3d/crates/pi_engine_shell" }
# pi_node_materials   = { path = "../pi_3d/crates/node_materials" }
# default_render      = { path = "../pi_3d/crates/default_render" }
# pi_scene_context    = { path = "../pi_3d/crates/pi_scene_context" }
# unlit_material      = { path = "../pi_3d/crates/unlit_material" }
# pi_mesh_builder     = { path = "../pi_3d/crates/pi_mesh_builder" }
# pi_trail_renderer   = { path = "../pi_3d/crates/trail" }
# pi_gltf2_load       = { path = "../pi_3d/crates/gltf2" }
# pi_particle_system  = { path = "../pi_3d/crates/particle_system" }
# pi_3d_state         = { path = "../pi_3d/crates/state" }

# [net]
# git-fetch-with-cli = true
# offline = true